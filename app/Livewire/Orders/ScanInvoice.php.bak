<?php

namespace App\Livewire\Orders;

use Carbon\Carbon;
use Livewire\Component;
use Livewire\WithPagination;
use App\Models\Orders\OrderModel;
use App\Models\Orders\OrderDeliverysModel;

class ScanInvoice extends Component
{
    use WithPagination;

    public $scanInput = '';
    public ?OrderDeliverysModel $currentDelivery = null;
    public ?OrderModel $order = null;
    public array $deliveredQtyMap = [];
    
    // Filter properties
    public $filterType = 'today'; // today, date-range, pending, all
    public $startDate;
    public $endDate;
    public $deliveryStatus = ''; // '', 'success', 'pending', 'cancelled'
    
    // Stats
    public $stats = [
        'today' => ['count' => 0, 'amount' => 0],
        'pending' => ['count' => 0, 'amount' => 0],
        'success' => ['count' => 0, 'amount' => 0],
        'monthly' => ['count' => 0, 'amount' => 0],
        'yearly' => ['count' => 0, 'amount' => 0],
    ];

    protected function resetScanData()
    {
        $this->currentDelivery = null;
        $this->order = null;
        $this->deliveredQtyMap = [];
    }

    public function mount()
    {
        $this->startDate = now()->format('Y-m-d');
        $this->endDate = now()->format('Y-m-d');
        $this->resetScanData();
        $this->loadStats();
    }

    public function updatedScanInput()
    {
        if (empty($this->scanInput)) {
            $this->resetScanData();
            return;
        }

        $delivery = OrderDeliverysModel::with(['order.customer', 'order.items', 'order.deliveryAddress', 'order.deliveries.payments'])
            ->where('order_delivery_number', $this->scanInput)
            ->first();

        if ($delivery) {
            // Mark as success
            $delivery->order_delivery_status = 'success';
            $delivery->order_delivery_status_date = now();
            $delivery->save();

            $this->currentDelivery = $delivery;
            $this->order = $delivery->order;

            // Update deliveredQtyMap only if we have data
            if ($this->order && $this->order->deliveries) {
                $this->deliveredQtyMap = $this->order->deliveries
                    ->flatMap->items
                    ->groupBy('product_id')
                    ->map(fn($group) => $group->sum('quantity'))
                    ->toArray();
            }

            $this->dispatch('notify', type: 'success', message: 'ตรวจสอบการจัดส่งสำเร็จ ✅');
        } else {
            $this->resetScanData();
            $this->dispatch('notify', type: 'error', message: 'ไม่พบบิลย่อยนี้ ❌');
        }

        $this->scanInput = '';
        $this->loadStats();
    }

    public function setFilter($type)
    {
        $this->filterType = $type;
        $this->resetPage();
    }

    public function cancelSuccess($deliveryId)
    {
        $delivery = OrderDeliverysModel::find($deliveryId);
        if ($delivery) {
            $delivery->order_delivery_status = 'pending';
            $delivery->order_delivery_status_date = null;
            $delivery->save();
            $this->loadStats();
            $this->dispatch('notify', type: 'success', message: 'ยกเลิกการตรวจสอบสำเร็จ');

            // ถ้ายกเลิกบิลที่กำลังดูอยู่ ให้ clear current delivery
            if ($this->currentDelivery && $this->currentDelivery->id === $deliveryId) {
                $this->resetScanData();
            }
        }
    }

    private function loadStats()
    {
        // Today's stats
        $this->stats['today'] = [
            'count' => OrderDeliverysModel::whereDate('order_delivery_date', today())->count(),
            'amount' => OrderDeliverysModel::whereDate('order_delivery_date', today())->sum('order_delivery_grand_total')
        ];

        // Pending stats (delivery date < today && not success)
        $this->stats['pending'] = [
            'count' => OrderDeliverysModel::where('order_delivery_date', '<', today())
                ->where('order_delivery_status', '!=', 'success')
                ->count(),
            'amount' => OrderDeliverysModel::where('order_delivery_date', '<', today())
                ->where('order_delivery_status', '!=', 'success')
                ->sum('order_delivery_grand_total')
        ];

        // Success stats
        $this->stats['success'] = [
            'count' => OrderDeliverysModel::where('order_delivery_status', 'success')->count(),
            'amount' => OrderDeliverysModel::where('order_delivery_status', 'success')->sum('order_delivery_grand_total')
        ];

        // Monthly stats (current month)
        $this->stats['monthly'] = [
            'count' => OrderDeliverysModel::whereYear('order_delivery_date', now()->year)
                ->whereMonth('order_delivery_date', now()->month)
                ->count(),
            'amount' => OrderDeliverysModel::whereYear('order_delivery_date', now()->year)
                ->whereMonth('order_delivery_date', now()->month)
                ->sum('order_delivery_grand_total')
        ];

        // Yearly stats
        $this->stats['yearly'] = [
            'count' => OrderDeliverysModel::whereYear('order_delivery_date', now()->year)
                ->count(),
            'amount' => OrderDeliverysModel::whereYear('order_delivery_date', now()->year)
                ->sum('order_delivery_grand_total')
        ];
    }

    public function getDeliveriesProperty()
    {
        $query = OrderDeliverysModel::with(['order.customer'])
            ->when($this->filterType === 'today', function($q) {
                $q->whereDate('order_delivery_date', today());
            })
            ->when($this->filterType === 'date-range', function($q) {
                $q->whereBetween('order_delivery_date', [$this->startDate, $this->endDate]);
            })
            ->when($this->filterType === 'pending', function($q) {
                $q->where('order_delivery_date', '<', today())
                  ->where('order_delivery_status', '!=', 'success');
            })
            ->when($this->deliveryStatus !== '', function($q) {
                $q->where('order_delivery_status', $this->deliveryStatus);
            })
            ->latest('order_delivery_date');

        return $query->paginate(10);
    }

    public function getPendingDeliveriesProperty()
    {
        return OrderDeliverysModel::with(['order.customer'])
            ->where('order_delivery_date', '<', today())
            ->where('order_delivery_status', '!=', 'success')
            ->latest('order_delivery_date')
            ->take(5)
            ->get();
    }

    public function render()
    {
        return view('livewire.orders.scan-invoice', [
            'deliveries' => $this->deliveries,
            'pendingDeliveries' => $this->pendingDeliveries,
            'title' => 'สแกนตรวจสอบการจัดส่ง'
        ]);
    }
}
}
