<?php

namespace App\Enums;

enum TruckType: string
{
    case SIX_WHEEL_LARGE = 'six_wheel_large';    // ‡∏´‡∏Å‡∏•‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà 1-5 ‡∏ï‡∏±‡∏ô
    case SIX_WHEEL_SMALL = 'six_wheel_small';    // ‡∏´‡∏Å‡∏•‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å 1-6.5 ‡∏ï‡∏±‡∏ô  
    case SIX_WHEEL_MEDIUM = 'six_wheel_medium';  // ‡∏´‡∏Å‡∏•‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á 1-8 ‡∏ï‡∏±‡∏ô
    case TEN_WHEEL = 'ten_wheel';                // ‡∏£‡∏ñ‡∏™‡∏¥‡∏ö‡∏•‡πâ‡∏≠ 1-14 ‡∏ï‡∏±‡∏ô

    public function label(): string
    {
        return match($this) {
            self::SIX_WHEEL_LARGE => '‡∏´‡∏Å‡∏•‡πâ‡∏≠‡πÉ‡∏´‡∏ç‡πà',
            self::SIX_WHEEL_SMALL => '‡∏´‡∏Å‡∏•‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å',
            self::SIX_WHEEL_MEDIUM => '‡∏´‡∏Å‡∏•‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á',
            self::TEN_WHEEL => '‡∏£‡∏ñ‡∏™‡∏¥‡∏ö‡∏•‡πâ‡∏≠',
        };
    }

    public function capacity(): array
    {
        return match($this) {
            self::SIX_WHEEL_LARGE => ['min' => 1000, 'max' => 5000],    // 1-5 ‡∏ï‡∏±‡∏ô (kg)
            self::SIX_WHEEL_SMALL => ['min' => 1000, 'max' => 6500],    // 1-6.5 ‡∏ï‡∏±‡∏ô (kg)
            self::SIX_WHEEL_MEDIUM => ['min' => 1000, 'max' => 8000],   // 1-8 ‡∏ï‡∏±‡∏ô (kg)
            self::TEN_WHEEL => ['min' => 1000, 'max' => 14000],         // 1-14 ‡∏ï‡∏±‡∏ô (kg)
        };
    }

    public function description(): string
    {
        $capacity = $this->capacity();
        $minTon = $capacity['min'] / 1000;
        $maxTon = $capacity['max'] / 1000;
        
        return $this->label() . " ({$minTon}-{$maxTon} ‡∏ï‡∏±‡∏ô)";
    }

    public function icon(): string
    {
        return match($this) {
            self::SIX_WHEEL_LARGE => 'üöõ',      // ‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
            self::SIX_WHEEL_SMALL => 'üöö',      // ‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å
            self::SIX_WHEEL_MEDIUM => 'üöê',     // ‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏•‡∏≤‡∏á
            self::TEN_WHEEL => 'üöõ',           // ‡∏£‡∏ñ‡∏ö‡∏£‡∏£‡∏ó‡∏∏‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà (‡∏™‡∏¥‡∏ö‡∏•‡πâ‡∏≠)
        };
    }

    public function iconClass(): string
    {
        return match($this) {
            self::SIX_WHEEL_LARGE => 'fas fa-truck',
            self::SIX_WHEEL_SMALL => 'fas fa-shipping-fast',
            self::SIX_WHEEL_MEDIUM => 'fas fa-truck-moving',
            self::TEN_WHEEL => 'fas fa-truck-monster',
        };
    }

    public function color(): string
    {
        return match($this) {
            self::SIX_WHEEL_LARGE => 'text-blue-600',
            self::SIX_WHEEL_SMALL => 'text-green-600',
            self::SIX_WHEEL_MEDIUM => 'text-yellow-600',
            self::TEN_WHEEL => 'text-red-600',
        };
    }

    public static function getRecommendedTruck(float $weightKg): ?self
    {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
        $trucks = [
            self::SIX_WHEEL_LARGE,
            self::SIX_WHEEL_SMALL,
            self::SIX_WHEEL_MEDIUM,
            self::TEN_WHEEL,
        ];

        foreach ($trucks as $truck) {
            $capacity = $truck->capacity();
            if ($weightKg >= $capacity['min'] && $weightKg <= $capacity['max']) {
                return $truck;
            }
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 14 ‡∏ï‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏£‡∏ñ‡∏™‡∏¥‡∏ö‡∏•‡πâ‡∏≠ (‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≠‡∏ö)
        if ($weightKg > 14000) {
            return self::TEN_WHEEL;
        }

        // ‡∏ñ‡πâ‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ï‡∏±‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏Å‡∏•‡πâ‡∏≠‡πÄ‡∏•‡πá‡∏Å
        return self::SIX_WHEEL_SMALL;
    }

    public static function getAllTrucks(): array
    {
        return [
            self::SIX_WHEEL_LARGE,
            self::SIX_WHEEL_SMALL,
            self::SIX_WHEEL_MEDIUM,
            self::TEN_WHEEL,
        ];
    }
}
